#!/usr/bin/env python
import subprocess, socket
import os , sys, signal
from threading import Thread
dir_path = os.path.dirname(os.path.realpath(__file__))

clients = {}
ip_of_sender = subprocess.check_output("hostname -I" , shell=True).decode('utf-8').rstrip().split(' ')[-1]
esp_respond_sender_port = 3235
firmware = dir_path+'/../Detector/Detector.ino.esp32-gateway.bin'
nameFilter = "detector-"

version_filter = False
if  len(sys.argv) > 1:
	version_filter = str(sys.argv[1])

upgradeCount = 0


from zero import *
import time

class ServiceListener(object):
    def __init__(self):
        self.r = Zeroconf()

    def removeService(self, zeroconf, type, name):
        print()
        print( "Service", name, "removed")

    def addService(self, zeroconf, type, name):
        #print( "  Type is", type)
        info = self.r.getServiceInfo(type, name)
        if info and name.startswith(nameFilter):
            clients[name] = {}
            clients[name]['ip'] = str(socket.inet_ntoa(info.getAddress())).rstrip()
            clients[name]['port'] =  str(info.getPort())
            try:
                clients[name]['version'] = name.split('v')[1][:4]
            except:
                clients[name]['version'] = 0
            clients[name]['upgrade'] = (not version_filter or clients[name]['version'] != version_filter)
            if clients[name]['upgrade']:
                global upgradeCount
                upgradeCount += 1

            # Print
            printer()
            # print "Device ", len(clients),": ", name.split(type)[0], "UPGRADABLE" if  clients[name]['upgrade'] else "OK"




class Upgrader(Thread):
    def __init__(self, port, info):
        Thread.__init__(self)
        self.port = port
        self.info = info

    def run(self):
        stri = "Uploading Firmware to "+str(self.info['ip'])
        print stri
        cmd = 'python ~/.arduino15/packages/esp32/hardware/esp32/1.0.3-rc3/tools/espota.py -i '+self.info['ip']+' -I '+ip_of_sender+' -p '+self.info['port']+' -P '+str(self.port)+' -f '+firmware
        # print cmd
        p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        if (p.wait() == 0):
            stri = "Updated " + str(self.info['ip'])
        else:
            stri = "Failed " + str(self.info['ip'])
        print stri


def printer():
    subprocess.call('clear',shell=True)
    header = ""
    header += "=============================================\n"
    header += "============ ESP32 - OTA FIRMWARE updater ===\n"
    header += "=============================================\n"
    header += "\n"
    header += "LOCAL ip: "+ str(ip_of_sender)+"\n"
    header += "Firmware date: " + str(time.ctime(os.stat(firmware).st_mtime))+"\n"
    header += "\n"
    print (header)

    for k, cli in enumerate(sorted(clients.iteritems())):
        print "Device ", str(k+1).zfill(2),": ", cli[0].split('._arduino')[0], "UPGRADABLE" if  cli[1]['upgrade'] else "OK"

    print "\nDetecting devices... Press Enter when ready."


if __name__ == '__main__':
    while True:
        upgradeCount = 0
        clients = {}
        subprocess.call('clear',shell=True)
        r = Zeroconf()
        type = "_arduino._tcp.local."
        listener = ServiceListener()
        browser = ServiceBrowser(r, type, listener)

        printer()

        try:
            a = raw_input("...")
        except KeyboardInterrupt:
            r.close()
            browser.cancel();
            listener.r.close();
            print "Goodbye :)"
            os.kill(os.getpid(), signal.SIGKILL)

        r.close()
        #time.sleep(2)
        y = raw_input("Upload to "+str(upgradeCount)+" Devices ?... [y/n]\n\n")
        if y is not 'y':
            continue

        threadlist = []
        for esp, info in clients.items():
            if info['upgrade']:
                # print "Preparing upload to ", info['ip']
                threadlist.append(Upgrader(esp_respond_sender_port, info))
                esp_respond_sender_port += 1

        for t in threadlist:
            t.start()

        for t in threadlist:
            t.join()
